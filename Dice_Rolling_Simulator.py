# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'Dice.ui'
#
# Created by: PyQt5 UI code generator 5.15.6
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QApplication
from random import *
import numpy as np
from collections import Counter
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as Canvas
import matplotlib
from mplwidget import MplWidget

plt.style.use('dark_background')

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1314, 882)
        MainWindow.setStyleSheet("background-color: rgb(33,33,33);")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setGeometry(QtCore.QRect(35, 3, 1232, 773))
        self.widget.setObjectName("widget")
        self.gridLayout = QtWidgets.QGridLayout(self.widget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.title_label = QtWidgets.QLabel(self.widget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(26)
        font.setBold(True)
        font.setWeight(75)
        self.title_label.setFont(font)
        self.title_label.setStyleSheet("color: rgb(255, 255, 255);")
        self.title_label.setObjectName("title_label")
        self.horizontalLayout_5.addWidget(self.title_label)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem)
        self.gridLayout.addLayout(self.horizontalLayout_5, 0, 0, 2, 1)
        spacerItem1 = QtWidgets.QSpacerItem(458, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 0, 6, 1, 1)
        self.table_widget = QtWidgets.QTableWidget(self.widget)
        self.table_widget.setStyleSheet("alternate-background-color: rgb(61, 61, 61);\n"
"background-color: rgb(255, 255, 255);\n"
"gridline-color: rgb(0, 0, 0);\n"
"border-color: rgb(0, 0, 0);")
        self.table_widget.setRowCount(10000)
        self.table_widget.setColumnCount(4)
        self.table_widget.setHorizontalHeaderLabels(["Dice 1", "Dice 2", "Dice 3", "Sum"])
        self.table_widget.setObjectName("table_widget")
        self.gridLayout.addWidget(self.table_widget, 1, 6, 3, 1)
        self.groupBox = QtWidgets.QGroupBox(self.widget)
        self.groupBox.setStyleSheet("")
        self.groupBox.setTitle("")
        self.groupBox.setObjectName("groupBox")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.groupBox)
        self.verticalLayout.setObjectName("verticalLayout")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.number_dice_label = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setWeight(50)
        self.number_dice_label.setFont(font)
        self.number_dice_label.setStyleSheet("color: rgb(255, 255, 255);")
        self.number_dice_label.setObjectName("number_dice_label")
        self.horizontalLayout.addWidget(self.number_dice_label)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout.addItem(spacerItem2)
        self.dropdown = QtWidgets.QComboBox(self.groupBox)
        self.dropdown.currentTextChanged.connect(self.on_combobox_changed)
        self.dropdown.setEnabled(True)
        self.dropdown.setStyleSheet("color: rgb(255, 255, 255);\n"
"alternate-background-color: rgb(255, 255, 255);\n"
"background-color: rgb(61,61,61);")
        self.dropdown.setCurrentText("")
        self.dropdown.setObjectName("dropdown")
        self.horizontalLayout.addWidget(self.dropdown)
        self.verticalLayout.addLayout(self.horizontalLayout)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.number_throws_label = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.number_throws_label.setFont(font)
        self.number_throws_label.setStyleSheet("color: rgb(255, 255, 255);")
        self.number_throws_label.setObjectName("number_throws_label")
        self.horizontalLayout_4.addWidget(self.number_throws_label)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.radio_1 = QtWidgets.QRadioButton(self.groupBox)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radio_1.setFont(font)
        self.radio_1.setStyleSheet("color: rgb(255, 255, 255);")
        self.radio_1.setIconSize(QtCore.QSize(16, 20))
        self.radio_1.setChecked(True)
        self.radio_1.setObjectName("radio_1")
        self.horizontalLayout_2.addWidget(self.radio_1)
        self.radio_10 = QtWidgets.QRadioButton(self.groupBox)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radio_10.setFont(font)
        self.radio_10.setStyleSheet("color: rgb(255, 255, 255);")
        self.radio_10.setIconSize(QtCore.QSize(20, 16))
        self.radio_10.setObjectName("radio_10")
        self.horizontalLayout_2.addWidget(self.radio_10)
        self.radio_50 = QtWidgets.QRadioButton(self.groupBox)
        font = QtGui.QFont()
        font.setPointSize(12)
        self.radio_50.setFont(font)
        self.radio_50.setStyleSheet("color: rgb(255, 255, 255);")
        self.radio_50.setObjectName("radio_50")
        self.horizontalLayout_2.addWidget(self.radio_50)
        self.horizontalLayout_4.addLayout(self.horizontalLayout_2)
        self.verticalLayout.addLayout(self.horizontalLayout_4)
        spacerItem3 = QtWidgets.QSpacerItem(20, 76, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem3)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem4)
        self.roll_button = QtWidgets.QPushButton(self.groupBox, clicked=lambda: self.roll_dice())
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        self.roll_button.setFont(font)
        self.roll_button.setStyleSheet("color: rgb(255, 255, 255);\n"
"background-color: rgb(61, 61, 61);")
        self.roll_button.setObjectName("roll_button")
        self.horizontalLayout_3.addWidget(self.roll_button)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_3.addItem(spacerItem5)
        self.verticalLayout.addLayout(self.horizontalLayout_3)
        spacerItem6 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.verticalLayout.addItem(spacerItem6)
        self.gridLayout.addWidget(self.groupBox, 2, 0, 1, 1)
        spacerItem7 = QtWidgets.QSpacerItem(18, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem7, 2, 1, 1, 1)
        self.dice_image1 = QtWidgets.QWidget(self.widget)
        self.dice_image1.setMinimumSize(QtCore.QSize(150, 150))
        self.dice_image1.setMaximumSize(QtCore.QSize(150, 150))
        self.dice_image1.setObjectName("dice_image1")
        self.gridLayout.addWidget(self.dice_image1, 2, 2, 1, 1)
        spacerItem8 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem8, 2, 3, 1, 1)
        self.dice_image_2 = QtWidgets.QWidget(self.widget)
        self.dice_image_2.setMinimumSize(QtCore.QSize(150, 150))
        self.dice_image_2.setMaximumSize(QtCore.QSize(150, 150))
        self.dice_image_2.setObjectName("dice_image_2")
        self.gridLayout.addWidget(self.dice_image_2, 2, 4, 1, 1)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem9, 2, 5, 1, 1)
        self.formLayout = QtWidgets.QFormLayout()
        self.formLayout.setObjectName("formLayout")
        spacerItem10 = QtWidgets.QSpacerItem(0, 468, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.formLayout.setItem(0, QtWidgets.QFormLayout.LabelRole, spacerItem10)
        self.graph_widget = MplWidget(self.widget)
        self.graph_widget.setAutoFillBackground(False)
        self.graph_widget.setStyleSheet("background-color: rgb(107, 107, 107);")
        self.graph_widget.setObjectName("graph_widget")
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.graph_widget)
        spacerItem11 = QtWidgets.QSpacerItem(758, 0, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.formLayout.setItem(1, QtWidgets.QFormLayout.FieldRole, spacerItem11)
        self.gridLayout.addLayout(self.formLayout, 3, 0, 1, 6)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1314, 21))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Add items to dropdown combobox
        self.dropdown.addItem("1")
        self.dropdown.addItem("2")
        self.dropdown.addItem("3")
        self.table_widget.setHorizontalHeaderLabels(["Dice 1", "Dice 2", "Dice 3", "Sum"])



    def on_combobox_changed(self, value):
        global number_dice, dice1, dice2, dice3
        dice1.clear()
        dice2.clear()
        dice3.clear()
        self.table_widget.clear()
        self.table_widget.setHorizontalHeaderLabels(["Dice 1", "Dice 2", "Dice 3", "Sum"])
        self.graph_widget.canvas.ax.cla()
        number_dice = int(value)
        print(f"Number of Dice: {number_dice}")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.title_label.setText(_translate("MainWindow", "Dice Simulator"))
        self.number_dice_label.setText(_translate("MainWindow", "Number of Dice:"))
        self.number_throws_label.setText(_translate("MainWindow", "Number of Throws:"))
        self.radio_1.setText(_translate("MainWindow", "1"))
        self.radio_10.setText(_translate("MainWindow", "10"))
        self.radio_50.setText(_translate("MainWindow", "50"))
        self.roll_button.setText(_translate("MainWindow", "Roll"))


    global dice1, dice2, dice3, sum_dice
    dice1 = []
    dice2 = []
    dice3 = []
    sum_dice = []



    def roll_dice(self):
        global sum_dice
        if self.radio_1.isChecked():
            global sum_dice
            if number_dice == 1:
                val1 = randrange(1, 7)
                dice1.append(val1)
                print(f"Dice 1: {dice1}")
                sum_dice.append(val1)

            if number_dice == 2:
                val1 = randrange(1, 7)
                dice1.append(val1)
                print(f"Dice 1: {dice1}")
                val2 = randrange(1, 7)
                dice2.append(val2)
                print(f"Dice 2: {dice2}")
                sum_dice_array = np.add(dice1, dice2)
                print(sum_dice_array)
                sum_dice = sum_dice_array.tolist()

            if number_dice == 3:
                val1 = randrange(1, 7)
                dice1.append(val1)
                print(f"Dice 1: {dice1}")
                val2 = randrange(1, 7)
                dice2.append(val2)
                print(f"Dice 2: {dice2}")
                val3 = randrange(1, 7)
                dice3.append(val3)
                print(f"Dice 3: {dice3}")
                sum_dice_array = np.add(np.add(dice1, dice2), dice3)
                print(sum_dice_array)
                sum_dice = sum_dice_array.tolist()

        if self.radio_10.isChecked():
            for i in range(10):
                if number_dice == 1:
                    val1 = randrange(1, 7)
                    dice1.append(val1)
                    print(f"Dice 1: {dice1}")
                    sum_dice.append(val1)
                    self.dice_image1.setStyleSheet(f"background-image: url(:/Assets/{val1}.jpg)")
                if number_dice == 2:
                    val1 = randrange(1, 7)
                    dice1.append(val1)
                    print(f"Dice 1: {dice1}")
                    val2 = randrange(1, 7)
                    dice2.append(val2)
                    print(f"Dice 2: {dice2}")

                    sum_dice_array = np.add(dice1, dice2)
                    print(sum_dice_array)
                    sum_dice = sum_dice_array.tolist()

                if number_dice == 3:
                    val1 = randrange(1, 7)
                    dice1.append(val1)
                    print(f"Dice 1: {dice1}")
                    val2 = randrange(1, 7)
                    dice2.append(val2)
                    print(f"Dice 2: {dice2}")
                    val3 = randrange(1, 7)
                    dice3.append(val3)
                    print(f"Dice 3: {dice3}")
                    sum_dice_array = np.add(np.add(dice1, dice2), dice3)
                    print(sum_dice_array)
                    sum_dice = sum_dice_array.tolist()

        if self.radio_50.isChecked():
            for i in range(50):
                if number_dice == 1:
                    val1 = randrange(1, 7)
                    dice1.append(val1)
                    print(f"Dice 1: {dice1}")
                    sum_dice.append(val1)
                if number_dice == 2:
                    val1 = randrange(1, 7)
                    dice1.append(val1)
                    print(f"Dice 1: {dice1}")
                    val2 = randrange(1, 7)
                    dice2.append(val2)
                    print(f"Dice 2: {dice2}")

                    sum_dice_array = np.add(dice1, dice2)
                    print(sum_dice_array)
                    sum_dice = sum_dice_array.tolist()

                if number_dice == 3:
                    val1 = randrange(1, 7)
                    dice1.append(val1)
                    print(f"Dice 1: {dice1}")
                    val2 = randrange(1, 7)
                    dice2.append(val2)
                    print(f"Dice 2: {dice2}")
                    val3 = randrange(1, 7)
                    dice3.append(val3)
                    print(f"Dice 3: {dice3}")
                    sum_dice_array = np.add(np.add(dice1, dice2), dice3)
                    print(sum_dice_array)
                    sum_dice = sum_dice_array.tolist()

        freq = Counter(sum_dice)
        print(f"Frequency: {freq}")
        # freq is output as a dictionary, with the keys ranging from 1-6, and the values being the frequency count
        global x_vals, y_vals
        x_vals = freq.keys()
        y_vals = freq.values()
        self.plot_data()
        self.table_data()

    def plot_data(self):
        global sum_dice
        number_rolls = str(len(sum_dice))
        self.graph_widget.canvas.ax.bar(x_vals, y_vals)
        self.graph_widget.canvas.ax.set_title(f"Number of Rolls: {number_rolls}")
        self.graph_widget.canvas.draw()
        print(f"Sum Dice: {sum_dice}")




    def table_data(self):
        row = 0
        dice2_index = 0
        dice3_index = 0
        sum_dice_index = 0
        global dice1, dice2, dice3, sum_dice

        for x in sum_dice:
            dice1_values = str([dice1[row]])
            dice1_values = dice1_values.replace("[", "").replace("]", "")
            self.table_widget.setItem(row, 0, QtWidgets.QTableWidgetItem(dice1_values))
            sum_dice_values = str([sum_dice[row]])
            sum_dice_values = sum_dice_values.replace("[", "").replace("]", "")
            self.table_widget.setItem(row, 3, QtWidgets.QTableWidgetItem(sum_dice_values))
            # Checking if List 2 is empty
            if not dice2:
                pass
            else:
                try:
                    dice2_values = str([dice2[dice2_index]])
                    dice2_values = dice2_values.replace("[", "").replace("]", "")
                    self.table_widget.setItem(row, 1, QtWidgets.QTableWidgetItem(dice2_values))
                    dice2_index = dice2_index + 1
                except:
                    pass

            # Checking if List 3 is empty
            if not dice3:
                pass
            else:
                try:
                    dice3_values = str([dice3[dice3_index]])
                    dice3_values = dice3_values.replace("[", "").replace("]", "")
                    self.table_widget.setItem(row, 2, QtWidgets.QTableWidgetItem(dice3_values))
                    dice3_index = dice3_index + 1
                except:
                    pass
            row = row+1


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
